<?php
namespace UserBundle\Controller;

use Swift_Mailer;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\DependencyInjection\Tests\Compiler\J;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Serializer\Encoder\JsonEncoder;
use Symfony\Component\Serializer\Encoder\XmlEncoder;
use Symfony\Component\Serializer\Normalizer\ObjectNormalizer;
use Symfony\Component\Serializer\Serializer;
use UserBundle\Entity\Affectation;
use UserBundle\Entity\Poste;
use UserBundle\Entity\Projet;
use UserBundle\Entity\User;

header('Access-Control-Allow-Origin: *');
header("Access-Control-Allow-Methods: GET, POST");
header("Access-Control-Allow-Headers: Content-Type, Access-Control-Allow-Headers, X-Requested-With");
class DefaultController extends Controller
{
    public function indexAction()
    {
        return $this->render('@User\Default\index.html.twig');
    }

    public function ResgiterAction(Request $request){
    $content = $request->getContent();
    $json = json_decode($content, true);
    $user = new User();
    $user->setUsername($json["username"]);
    $user->setPassword($json["password"]);
    $user->setEmail($json["email"]);
    $em = $this->getDoctrine()->getManager();
    $em->persist($user);
    $em->flush();
    return new Response('Done',200);

}

    public function ResgiterAdminAction(Request $request){
        $content = $request->getContent();
        $json = json_decode($content, true);
        $user = new User();
        $user->setUsername($json["username"]);
        $user->setPassword($json["password"]);
        $user->setEmail($json["email"]);
        $user->setRole($json["role"]);
        $em = $this->getDoctrine()->getManager();
        $em->persist($user);
        $em->flush();
        return new Response('Done',200);

    }
    public function LoginAction(Request $request){
        $content = $request->getContent();
        $json = json_decode($content, true);
        $user = $this->getDoctrine()->getRepository(User::class)->findOneBy(array("email"=>$json["email"]));

        if($user){
            if($user->getPassword() == $json["password"]){
                $encoders = array(new XmlEncoder(), new JsonEncoder());
                $normalizer = new ObjectNormalizer();
                $normalizer->setCircularReferenceLimit(2);

                $normalizer->setCircularReferenceHandler(function ($object) {
                    return $object->getId();
                });
                $normalizers = array($normalizer);
                $serializer = new Serializer($normalizers, $encoders);
                $formatted = $serializer->normalize($user);
                return new JsonResponse($formatted,200);
                //return new JsonResponse($user,200);
            }
            else{
                return new Response("Mot de passe invalide",500);
            }
        }else{
            return new Response("Email invalide",500);
        }
    }
    public function AddProAction(Request $request){
        $content = $request->getContent();
        $json = json_decode($content, true);
        $projet = new Projet();
        $projet->setNomProjet($json["nomPro"]);
        $projet->setNumObj($json["numObj"]);
        $projet->setDescriptionPro($json["description"]);
        $projet->setNaturePro($json["nature"]);
        $projet->setClientPro($json["nomCli"]);
        $projet->setStatut("En attente");
        $projet->setDatedebut(new \DateTime($json["datedebut"]));
        $projet->setDatefin(new \DateTime($json["datefin"]));
        $f = "hello";
        $filee = $json["image"];
        //$data = base64_decode($file);
        $filename = md5(uniqid()).'.jpeg';
        $file=fopen('../web/'.$filename, 'wb');

        fwrite($file, base64_decode($filee));

        fclose($file);
        //$fileMoved = rename('../webimage.jpeg', '../web/image.jpeg');
        //$marque->setLogo("/logos/".$fileName);
        $projet->setPhotoPro($filename);
        $em = $this->getDoctrine()->getManager();
        $em->persist($projet);
        $em->flush();
        return new Response('Done',200);

    }
    public function listeDesSalarieAction(){
        $user = $this->getDoctrine()->getRepository(User::class)->findBy(array("role"=>"user"));
        if($user){
            $encoders = array(new XmlEncoder(), new JsonEncoder());
            $normalizer = new ObjectNormalizer();
            $normalizer->setCircularReferenceLimit(2);

            $normalizer->setCircularReferenceHandler(function ($object) {
                return $object->getId();
            });
            $normalizers = array($normalizer);
            $serializer = new Serializer($normalizers, $encoders);
            $formatted = $serializer->normalize($user);
            return new JsonResponse(json_encode($formatted));
        }else{
            return new JsonResponse("Empty",500);
        }
    }
    public function ListProjectsAction(){
        $projet = $this->getDoctrine()->getRepository(Projet::class)->findAll();
        if($projet){
            $encoders = array(new XmlEncoder(), new JsonEncoder());
            $normalizer = new ObjectNormalizer();
            $normalizer->setCircularReferenceLimit(2);

            $normalizer->setCircularReferenceHandler(function ($object) {
                return $object->getId();
            });
            $normalizers = array($normalizer);
            $serializer = new Serializer($normalizers, $encoders);
            $formatted = $serializer->normalize($projet);
            return new JsonResponse(json_encode($formatted));
        }else{
            return new JsonResponse("Empty",500);
        }
    }
    public function getListProjectUserAction($id){
        $user = $this->getDoctrine()->getRepository(User::class)->find($id);
        if($user){
            $projet = $this->getDoctrine()->getRepository(Affectation::class)->findBy(array("user"=>$user));
            if($projet){
                $encoders = array(new XmlEncoder(), new JsonEncoder());
                $normalizer = new ObjectNormalizer();
                $normalizer->setCircularReferenceLimit(2);

                $normalizer->setCircularReferenceHandler(function ($object) {
                    return $object->getId();
                });
                $normalizers = array($normalizer);
                $serializer = new Serializer($normalizers, $encoders);
                $formatted = $serializer->normalize($projet);
                return new JsonResponse(json_encode($formatted));
            }else{
                return new JsonResponse("Empty",500);
            }
        }
        else{
            return new JsonResponse("Empty",500);
        }
    }
    public function listeDesPostesAction(){
        $poste = $this->getDoctrine()->getRepository(Poste::class)->findAll();
        $p = [];
        foreach ($poste as $x){
            array_push($p,$x->getPoste());
        }
        return new JsonResponse($p);
    }
    public function getPosteByNameAction(Request $request){
        $content = $request->getContent();
        $json = json_decode($content, true);
        $poste = $this->getDoctrine()->getRepository(Poste::class)->findBy(array("poste"=>$json["poste"]));
        if($poste){
            $encoders = array(new XmlEncoder(), new JsonEncoder());
            $normalizer = new ObjectNormalizer();
            $normalizer->setCircularReferenceLimit(2);

            $normalizer->setCircularReferenceHandler(function ($object) {
                return $object->getId();
            });
            $normalizers = array($normalizer);
            $serializer = new Serializer($normalizers, $encoders);
            $formatted = $serializer->normalize($poste);
            return new JsonResponse(json_encode($formatted));
        }else{
            return new JsonResponse("Empty",500);
        }
    }
    public function AddAffectationAction(Request $request){
        $content = $request->getContent();
        $json = json_decode($content, true);
        $affectation = new Affectation();
        $user = $this->getDoctrine()->getRepository(User::class)->find($json["iduser"]);
        $projet = $this->getDoctrine()->getRepository(Projet::class)->find($json["idprojet"]);
        $poste = $this->getDoctrine()->getRepository(Poste::class)->find($json["idposte"]);
        //return new JsonResponse($projet->getId());
        $affectation->setUser($user);
        $affectation->setPoste($poste);
        $affectation->setProjet($projet);
        $affectation->setDates(json_encode($json["date"]));
        $em = $this->getDoctrine()->getManager();
        $em->persist($affectation);
        $em->flush();
        return new JsonResponse("Done");
    }

    public function editUserAction(Request $request){
        $content = $request->getContent();
        $json = json_decode($content, true);

        $em = $this->getDoctrine()->getManager();


        $user  = $this->getDoctrine()->getRepository('UserBundle:User')->find($json["id"]);
        $user->setNom($json["nom"]);
        $user->setPrenom($json["prenom"]);
        $user->setAdresse($json["adresse"]);
        $user->setNomJF($json["nom_j_f"]);
        $user->setDateNais(new \DateTime($json["dateNais"]));

        $user->setGender($json["gender"]);
        $user->setAdresse($json["adresse"]);
        $user->setCodeP($json["codeP"]);
        $user->setVille($json["ville"]);
        $user->setNumTel($json["tel"]);
        $user->setNumTelP($json["telpor"]);
        $user->setEmail($json["email"]);
        $user->setDernierecole($json["der_ecole_freq"]);
        $user->setDernierDiplome($json["der_diplome"]);
        $user->setDeductionSociale($json["forfaitaire_soc"]);
        $user->setDecImpo($json["dec_impo"]);
        $user->setSituationFam($json["sit_familiale"]);
        $user->setNbrPersCharg($json["nbr_per_charge"]);
        $user->setNbrEnfants($json["nbr_enfant"]);
        $user->setNumeroSecSoc($json["num_sec_soc"]);
        $user->setLieuNais($json["lieu_nais"]);
        $user->setNationalite($json["nationalite"]);
        $user->setNumCartesej($json["num_carte_sej"]);
        $user->setDateValNumCartesej(new \DateTime($json["dat_val"]));

        $user->setRetraite($json["retraite"]);
        $user->setIban($json["iban"]);
        $user->setRetraiteAudiens($json["audiens_retraite"]);
        $user->setNumCongesSpectacle($json["num_conge_spec"]);
        $user->setDateDernierVisiteMed(new \DateTime($json["date_med"]));

        $user->setTraHandicap($json["handicap"]);
        $user->setAdresseCentreSec($json["adresse_sec_soc"]);
        $user->setCodepostalCentreSec($json["codeP_sec_soc"]);
        $user->setVilleCentreSec($json["ville_sec_soc"]);
        $user->setNomPersu($json["nom_pers_urg"]);
        $user->setAdressePersu($json["pers_adr_urg"]);
        $user->setNumtelPersu($json["pers_num_urg"]);
        //return new JsonResponse($user);

        $em->persist($user);
        $em->flush();
        return new Response('Done',200);

    }
    public function getProjectByNameAction(Request $request){
        $content = $request->getContent();
        $json = json_decode($content, true);
        $projet = $this->getDoctrine()->getRepository(Projet::class)->findOneBy(array("nomProjet"=>$json["nomProjet"]));
        if($projet){
            $encoders = array(new XmlEncoder(), new JsonEncoder());
            $normalizer = new ObjectNormalizer();
            $normalizer->setCircularReferenceLimit(2);

            $normalizer->setCircularReferenceHandler(function ($object) {
                return $object->getId();
            });
            $normalizers = array($normalizer);
            $serializer = new Serializer($normalizers, $encoders);
            $formatted = $serializer->normalize($projet);
            return new JsonResponse($formatted);
        }else{
            return new JsonResponse("Empty",500);
        }
    }
    public function getUserAffectationsAction($id){
        $user = $this->getDoctrine()->getRepository(User::class)->find($id);
        $affecation = $this->getDoctrine()->getRepository(Affectation::class)->findBy(array("user"=>$user));
        if($affecation){
            $encoders = array(new XmlEncoder(), new JsonEncoder());
            $normalizer = new ObjectNormalizer();
            $normalizer->setCircularReferenceLimit(2);

            $normalizer->setCircularReferenceHandler(function ($object) {
                return $object->getId();
            });
            $normalizers = array($normalizer);
            $serializer = new Serializer($normalizers, $encoders);
            $formatted = $serializer->normalize($affecation);
            return new JsonResponse(json_encode($formatted));
        }else{
            return new JsonResponse("Empty",500);
        }

    }
    public function sendEmailAction(){
        $transport = \Swift_SmtpTransport::newInstance('smtp.gmail.com', 465,'ssl')->setUsername('monguide07@gmail.com')->setPassword('Root123@');

        $mailer = \Swift_Mailer::newInstance($transport);
        $message = \Swift_Message::newInstance('Vérifier votre compte !')
            ->setFrom(array('monguide07@gmail.com' => 'Service Water'))
            ->setTo(array("jasser.hadhri11@gmail.com"))
            ->setBody("Bonjour ", 'text/plain');
        $result = $mailer->send($message);

        // or, you can also fetch the mailer service this way
        // $this->get('mailer')->send($message);

        return new Response("Done");

    }
    public function ListeAffectationsAdminAction(){
        $affectation = $this->getDoctrine()->getRepository(Affectation::class)->findBy(array("salaire"=>null));
        if($affectation) {
            $encoders = array(new XmlEncoder(), new JsonEncoder());
            $normalizer = new ObjectNormalizer();
            $normalizer->setCircularReferenceLimit(2);

            $normalizer->setCircularReferenceHandler(function ($object) {
                return $object->getId();
            });
            $normalizers = array($normalizer);
            $serializer = new Serializer($normalizers, $encoders);
            $formatted = $serializer->normalize($affectation);
            return new JsonResponse(json_encode($formatted),200);
        }else{
            return new JsonResponse("Empty",500);
        }
    }
    public function AddSalaireAction(Request $request){
        $content = $request->getContent();
        $json = json_decode($content, true);
        $poste = $this->getDoctrine()->getRepository(Poste::class)->find($json["id"]);
        $affectation = $this->getDoctrine()->getRepository(Affectation::class)->find($json["idAffectation"]);
        $affectation->setPoste($poste);
        $affectation->setSalaire($json["salaire"]);
        $em = $this->getDoctrine()->getManager();
        $em->persist($affectation);
        $em->flush();
        $dates = json_decode($affectation->getDates());
        $transport = \Swift_SmtpTransport::newInstance('smtp.gmail.com', 465,'ssl')->setUsername('monguide07@gmail.com')->setPassword('Root123@');
        $mailer = \Swift_Mailer::newInstance($transport);
        $message = \Swift_Message::newInstance('Mail primo arrivés')
            ->setFrom(array('monguide07@gmail.com' => 'Supamonks'))
            ->setTo(array($affectation->getUser()->getEmail()))
            ->setCc(array('cesar.ibo112@gmail.com'))
            ->setBody("Bonjour ".$affectation->getUser()->getNom()."\n"
                ."On te souhaite officiellement la bienvenue dans la team ! \n"
                ."Nous aurons le plaisir de t'accueillir à Supamonks au poste de ".$affectation->getPoste()->getPoste()." du ".$dates[0][0]." au ".$dates[count($dates) -1][1]." sur notre projet ".$affectation->getProjet()->getNomProjet()." . \n"
                ."Ces dates sont estimatives et dépendront de l'avancée de la prod: nous pouvons donc être amenés à prolonger ou écourter ton contrat. \n"
                ."Tu seras payé en tant qu'intermittent du spectacle sur la base de ".$affectation->getSalaire()." euros brut/jour. \n"
                ."On a hâte de bosser avec toi ! \n"
                ."A très bientôt,", 'text/plain');
        $result = $mailer->send($message);
        return new Response("Done",200);
    }
    public function getProjectDetailsAction($id){
        $projet = $this->getDoctrine()->getRepository(Projet::class)->find($id);
        if($projet) {
            $encoders = array(new XmlEncoder(), new JsonEncoder());
            $normalizer = new ObjectNormalizer();
            $normalizer->setCircularReferenceLimit(2);

            $normalizer->setCircularReferenceHandler(function ($object) {
                return $object->getId();
            });
            $normalizers = array($normalizer);
            $serializer = new Serializer($normalizers, $encoders);
            $formatted = $serializer->normalize($projet);
            return new JsonResponse(json_encode($formatted),200);
        }else{
            return new JsonResponse("Empty",500);
        }
    }

    public function GetMyProjectsUserAction($id){
        $user =$this->getDoctrine()->getRepository(User::class)->find($id);
        $affectation = $this->getDoctrine()->getRepository(Affectation::class)->findBy(array("user"=>$user));
        $p = [];
        foreach ($affectation as $a){
            array_push($p,$a->getProjet());
        }
        $encoders = array(new XmlEncoder(), new JsonEncoder());
        $normalizer = new ObjectNormalizer();
        $normalizer->setCircularReferenceLimit(2);

        $normalizer->setCircularReferenceHandler(function ($object) {
            return $object->getId();
        });
        $normalizers = array($normalizer);
        $serializer = new Serializer($normalizers, $encoders);
        $formatted = $serializer->normalize($p);
        return new JsonResponse(json_encode($formatted),200);
    }
    public function GetUserInfoAction($id){
        $user =$this->getDoctrine()->getRepository(User::class)->find($id);
        $affectation = $this->getDoctrine()->getRepository(Affectation::class)->findBy(array("user"=>$user));
        $somme = 0 ;
        $projetEncours = 0;
        $projetTermine = 0;
        $nbrJours = 0 ;
        $money = 0 ;
        $totalProjets = count($affectation);
        foreach ($affectation as $a){
            if($a->getProjet()->getStatut() == "En Cours"){
                $projetEncours = $projetEncours +1;
            }if($a->getProjet()->getStatut() == "Terminée"){
                $projetTermine = $projetTermine +1;
            }
            $date = json_decode($a->getDates());
            $money = $money + $a->getSalaire();
            foreach ($date as $d){
                $dateDebut = new \DateTime($d[0]);
                $dateFin = new \DateTime($d[1]);
                $nbrJours = $nbrJours + $dateFin->diff($dateDebut)->d +1;
            }
        }
        $somme = $nbrJours * $money;
        $data = ["NbrJours"=>$nbrJours,"somme"=>$somme,"projetsEncour"=>$projetEncours,"ProjetTermine"=>$projetTermine,"totalProjet"=>$totalProjets];
        return new JsonResponse($data);
    }

    public function GetUserInfoMAction($id){
        $user =$this->getDoctrine()->getRepository(User::class)->find($id);
        $affectation = $this->getDoctrine()->getRepository(Affectation::class)->findBy(array("user"=>$user));

        $AffectationEncours = new Affectation();
        $projetTermine = 0;
        $nbrJours = 0 ;
        $nbrJoursv = 0 ;
        $money = 0 ;
        $totalProjets = count($affectation);
        foreach ($affectation as $a) {
            if ($a->getProjet()->getStatut() == "En Cours") {
                $AffectationEncours = $a;
            }
            else{
                $projetTermine++;
            }
        }
            $date = json_decode($a->getDates());
            foreach ($date as $d){

                $nbrJours ++;
        }
        $datev = json_decode($a->getValidedates());
        foreach ($datev as $d){

            $nbrJoursv ++;
        }
        $money = $money + $AffectationEncours->getSalaire();

        $sommeEX = $nbrJours * $money;
        $sommeV = $nbrJours * $money;
        $data = ["NbrJoursv"=>$nbrJoursv,"NbrJours"=>$nbrJours,"sommeEX"=>$sommeEX,"sommeV"=>$sommeV,"projetsEncour"=>$AffectationEncours,"ProjetTermine"=>$projetTermine,"totalProjet"=>$totalProjets];

        return new JsonResponse($data);
    }

}
